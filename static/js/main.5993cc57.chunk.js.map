{"version":3,"sources":["components/StartPage/StartPage.js","components/Navigation/Navigation.js","components/Item/Item.js","components/ButtonName/ButtonName.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["StartPage","className","roll","onClick","newList","document","querySelector","classList","toggle","Navigation","createFormforAddingListButtons","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","type","Item","handleShow","save","label","modalInput","lineThrough","checkIcon","uncheckIcon","index","display","deleteItem","style","role","aria-hidden","textDecoration","event","aria-label","name","min","max","aria-describedby","placeholder","ButtonName","windowWidth","DropdownItem","App","updateWindowDimensions","setState","window","innerWidth","onInputchange","inputAddNewButton","target","value","onInputChangeNewItem","inputAddNewItem","plusNewButton","preventDefault","state","container","push","listItems","setActiveButtonIdAndName","buttonName","activeButtonId","activeButtonName","addNewItem","item","setItemStyle","modalOnInputChange","saveModalNewValue","activeItemId","show","handleClose","inputValuesNewItem","this","addEventListener","removeEventListener","buttonsToBeRender","map","key","itemToBeRender","length","Modal","Header","Title","Body","onChange","Footer","Button","onSubmit","DropdownButton","title","variant","size","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNA8BeA,G,MA1BG,WAOd,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QACX,4BAAI,0BAAMA,UAAU,gBAAhB,aAAJ,kBACA,yBAAKA,UAAU,gBAEf,yBAAKA,UAAU,8BAA8BC,KAAK,SAASC,QAbvD,WAChB,IAAMC,EAAUC,SAASC,cAAc,YAClBD,SAASC,cAAc,mBAC/BC,UAAUC,OAAO,6BAC9BJ,EAAQG,UAAUC,OAAO,YAUT,uBAAGP,UAAU,mBACb,wBAAIA,UAAU,sBAAd,yB,wBCgBTQ,G,MA/BI,SAAC,GAAqC,EAApCC,+BAEjB,OACI,kBAAC,WAAD,KACI,4BAAQT,UAAU,OACd,kBAACU,EAAA,EAAD,CAAQC,OAAO,KAAKX,UAAU,eAC1B,kBAACU,EAAA,EAAOE,MAAR,CAAcC,KAAK,SACf,wBAAIb,UAAU,gBAAe,0BAAMA,UAAU,gBAAhB,aAA7B,mBAEJ,kBAACU,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKlB,UAAU,WACX,wBAAIA,UAAU,2BACV,4BAAQmB,KAAK,SAASF,GAAG,0BAA0BjB,UAAU,oCACzD,wBAAIA,UAAU,qBAAd,WAEJ,4BAAQmB,KAAK,SAASF,GAAG,0BAA0BjB,UAAU,oCACzD,wBAAIA,UAAU,qBAAd,qB,QCerBoB,G,YAlCF,SAAC,GAUmB,IAVjBC,EAUgB,EAVhBA,WACAC,EASgB,EAThBA,KACAC,EAQgB,EARhBA,MACAC,EAOgB,EAPhBA,WACAtB,EAMgB,EANhBA,QACAuB,EAKgB,EALhBA,YACAC,EAIgB,EAJhBA,UACAC,EAGgB,EAHhBA,YACAC,EAEgB,EAFhBA,MACAC,EACgB,EADhBA,QACAC,EAAgB,EAAhBA,WAEZ,OACI,wBAAI9B,UAAU,UAAU+B,MAAO,CAACF,YAC5B,yBAAK7B,UAAU,iCACX,yBAAKA,UAAU,cACf,uBAAGA,UAAU,gBAAgB+B,MAAQ,CAACF,QAAQF,GAAcK,KAAK,SAAS9B,QAAS,kBAAIA,KAAW+B,cAAY,SAC9G,uBAAGjC,UAAU,mCAAmC+B,MAAQ,CAACF,QAAQH,GAAYM,KAAK,SAAS9B,QAAS,kBAAIA,KAAW+B,cAAY,SAC3H,uBAAGjC,UAAU,SAAS+B,MAAO,CAACG,eAAgBT,IAErCH,EAAoBC,EAAbC,IAIpB,yBAAKxB,UAAU,aACX,uBAAGiB,GAAIM,EAAOvB,UAAU,kCAAmCgC,KAAK,SAAS9B,QAAS4B,EAAYG,cAAY,SAC1G,uBAAGhB,GAAIW,EAAO5B,UAAU,wBAAwBgC,KAAK,SAAS9B,QAAS,SAACiC,GAAD,OAASd,EAAWc,IAAQF,cAAY,SAC/G,2BAAOjC,UAAU,WAAWmB,KAAK,SAASiB,aAAW,kBAAkBC,KAAK,WAAWC,IAAI,IAAIC,IAAI,KAAKC,mBAAiB,mCAAmCC,YAAY,W,gBCW7KC,EApCI,SAAC,GAAqC,IAAnCxC,EAAkC,EAAlCA,QAASqB,EAAyB,EAAzBA,MAAOoB,EAAkB,EAAlBA,YAqBlC,OACI,kBAAC,WAAD,KAlBIA,EAAc,IAEV,kBAACC,EAAA,EAAD,CAAc5C,UAAU,YAAYE,QAASA,GAAUqB,GAKvD,wBAAIvB,UAAU,aACV,4BAAQE,QAASA,EAASiB,KAAK,SAASnB,UAAU,2EAA2EuB,M,QCuUlIsB,E,YA7Ub,aAAe,IAAD,8BACZ,+CA0CFC,uBAAyB,WACvB,EAAKC,SAAS,CAAEJ,YAAaK,OAAOC,cA5CxB,EAmDdC,cAAgB,SAACf,GACf,EAAKY,SAAS,CAAEI,kBAAmBhB,EAAMiB,OAAOC,SApDpC,EAwDdC,qBAAuB,SAACnB,GACtB,EAAKY,SAAS,CAAEQ,gBAAiBpB,EAAMiB,OAAOC,SAzDlC,EA6DdG,cAAgB,SAACrB,GAEf,GADAA,EAAMsB,iBAC+B,KAAjC,EAAKC,MAAMP,kBAAf,CAIA,IAAMQ,EAAS,YAAO,EAAKD,MAAMC,WACjCA,EAAUC,KAAK,CAAE3C,GAAI,EAAKyC,MAAMP,kBAAmBU,UAAW,KAE9D,EAAKd,SAAS,CACZY,UAAWA,EACXR,kBAAmB,OAxET,EA6EdW,yBAA2B,SAAClC,GAC1B,IAAMmC,EAAa,EAAKL,MAAMC,UAAU/B,GAAOX,GAE/C,EAAK8B,SAAS,CAAEiB,eAAgBpC,EAAOqC,iBAAkBF,KAhF7C,EAqFdG,WAAa,SAAC/B,GAEZ,GADAA,EAAMsB,iBAC6B,KAA/B,EAAKC,MAAMH,gBAAf,CAIA,IAAMI,EAAS,YAAO,EAAKD,MAAMC,WACjCA,EAAU,EAAKD,MAAMM,gBAClBH,UACAD,KAAK,CACJO,KAAM,EAAKT,MAAMH,gBACjB9B,YAAa,KACbE,YAAa,KACbD,UAAW,OACXG,QAAS,KAGb,EAAKkB,SAAS,CACZY,UAAWA,EACXJ,gBAAiB,OAxGP,EA8GdzB,WAAa,SAACF,GACZ,IAAM+B,EAAS,YAAO,EAAKD,MAAMC,WAEjCA,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOC,QAAU,OAChE,EAAKkB,SAAS,CAAEY,UAAWA,KAlHf,EAuHdS,aAAe,SAACxC,GACd,IAAM+B,EAAS,YAAO,EAAKD,MAAMC,WAEyC,OAAtEA,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOH,aAA4F,SAApEkC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOF,WACtIiC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOH,YAAc,eACpEkC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOD,YAAc,OACpEgC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOF,UAAY,OAElEiC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOH,YAAc,KACpEkC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOF,UAAY,OAClEiC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAUjC,GAAOD,YAAc,MAEtE,EAAKoB,SAAS,CAAEY,UAAWA,KAnIf,EAwIdU,mBAAqB,SAAClC,GACpB,EAAKY,SAAS,CAAEvB,WAAYW,EAAMiB,OAAOC,SAzI7B,EA4IdiB,kBAAoB,WAClB,IAAMX,EAAS,YAAO,EAAKD,MAAMC,WACjCA,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU,EAAKH,MAAMa,cAAcJ,KAAO,EAAKT,MAAMlC,WAE1F,EAAKuB,SAAS,CAAEyB,MAAM,IACtB,EAAKzB,SAAS,CAAEY,UAAWA,KAjJf,EAoJdc,YAAc,WACZ,EAAK1B,SAAS,CAAEyB,MAAM,IACtB,EAAKzB,SAAS,CAAEyB,MAAM,KAtJV,EA0JdnD,WAAa,SAACc,GACZ,EAAKY,SAAS,CACZyB,MAAM,EACNlD,MAAM,EACNiD,aAAcpC,EAAMiB,OAAOnC,MA5J7B,EAAKyC,MAAQ,CACXf,YAAa,EACbqB,eAAgB,EAChBC,iBAAkB,GAClBM,aAAc,EACdpB,kBAAmB,GACnBI,gBAAiB,GACjBjC,MAAM,EACNE,WAAY,GACZgD,MAAM,EACNE,mBAAoB,GACpBf,UAAW,IAbD,E,iFAkCZgB,KAAK7B,yBACLE,OAAO4B,iBAAiB,SAAUD,KAAK7B,0B,6CAKvCE,OAAO6B,oBAAoB,SAAUF,KAAK7B,0B,+BA6HlC,IA0BJgC,EA1BG,OA2BPA,EAAqBH,KAAKjB,MAAMC,UAAUoB,KAAI,SAAC1B,EAAOzB,GACpD,OAAQ,kBAAC,EAAD,CACNe,YAAa,EAAKe,MAAMf,YACxBzC,QAAS,kBAAM,EAAK4D,yBAAyBlC,IAC7CoD,IAAG,UAAK3B,GAAL,OAAazB,GAChBL,MAAO8B,EAAMpC,QAKjB,IAAIgE,EAAiB,KAoBrB,OAnBoC,IAAhCN,KAAKjB,MAAMC,UAAUuB,SACvBD,EAAkBN,KAAKjB,MAAMC,UAAUgB,KAAKjB,MAAMM,gBAAgBH,UAAUkB,KAAI,SAAC1B,EAAOzB,GACtF,OAAQ,kBAAC,EAAD,CACN1B,QAAS,kBAAM,EAAKkE,aAAaxC,IACjCoD,IAAG,UAAK3B,GAAL,OAAazB,GAChBA,MAAOA,EACPL,MAAO8B,EAAMc,KACb9C,WAAY,SAACc,GAAD,OAAW,EAAKd,WAAWc,IACvCb,KAAM,EAAKoC,MAAMpC,KACjBE,WAAY,EAAKkC,MAAMlC,WACvBC,YAAa4B,EAAM5B,YACnBC,UAAW2B,EAAM3B,UACjBC,YAAa0B,EAAM1B,YACnBE,QAASwB,EAAMxB,QACfC,WAAY,kBAAM,EAAKA,WAAWF,UAMtC,kBAAC,WAAD,KAEE,kBAAEuD,EAAA,EAAF,CAAQX,KAAMG,KAAKjB,MAAMc,KAAMxE,UAAU,aACvC,kBAACmF,EAAA,EAAMC,OAAP,CAAcpF,UAAU,2BACtB,kBAACmF,EAAA,EAAME,MAAP,oBAGF,kBAACF,EAAA,EAAMG,KAAP,KACE,2BACEC,SAAUZ,KAAKN,mBACflD,KAAK,OACLnB,UAAU,6BACVyC,YAAY,oBACZL,aAAW,OACXI,mBAAiB,kCAGrB,kBAAC2C,EAAA,EAAMK,OAAP,KACE,kBAACC,EAAA,EAAD,CACExE,GAAG,oBACHjB,UAAU,iBACVE,QAAS,SAACiC,GAAD,OAAW,EAAKsC,YAAYtC,KAHvC,SAIA,kBAACsD,EAAA,EAAD,CACEvF,QAAS,kBAAM,EAAKoE,qBACpBrD,GAAG,kBACHjB,UAAU,6BAHZ,UAQJ,kBAAE,EAAF,MAEA,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAIF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,+BACb,0BAAMA,UAAU,yBAAyB0F,SAAW,SAACvD,GAAD,OAAW,EAAKqB,cAAcrB,KAChF,2BACEoD,SAAUZ,KAAKzB,cACfG,MAAOsB,KAAKjB,MAAMP,kBAClBhC,KAAK,OACLF,GAAG,mBACHjB,UAAU,eACVyC,YAAY,iBACZL,aAAW,cACXI,mBAAiB,iCACnB,4BACEtC,QAAS,SAACiC,GAAD,OAAW,EAAKqB,cAAcrB,IACvChB,KAAK,SACLF,GAAG,aACHjB,UAAU,eAJZ,MAOF,yBAAKA,UAAU,wBACb,kBAAC2F,EAAA,EAAD,CACE1E,GAAG,wBACHjB,UAAS,6BAlHjB,EAAK0D,MAAMf,YAAc,IACpB,KAGA,UA+GGiD,MAAM,iBACNC,QAAQ,UACRC,KAAK,MACJhB,GAGH,wBAAI9E,UAAS,wBAhHnB,EAAK0D,MAAMf,YAAc,IACpB,SAGA,OA6GImC,KAKP,yBAAK9E,UAAU,yBACb,0BAAMA,UAAU,WAAW0F,SAAW,SAACvD,GAAD,OAAW,EAAK+B,WAAW/B,KAC/D,yBAAKnC,UAAU,cACb,2BACEuF,SAAUZ,KAAKrB,qBACfD,MAAOsB,KAAKjB,MAAMH,gBAClBpC,KAAK,OACLnB,UAAU,qCACVyC,YAAY,WACZL,aAAW,cACXI,mBAAiB,kCAErB,yBACEtC,QAAS,kBAAM,EAAKgE,cACpBlE,UAAU,aACVgC,KAAK,UACL,uBAAGhC,UAAU,qBAAqBiC,cAAY,SAC9C,wBAAIjC,UAAU,WAAd,kBAGJ,wBAAIA,UAAU,aACZ,wBAAIA,UAAU,aAAa2E,KAAKjB,MAAMO,kBAErCgB,W,GAhUCc,aCEEC,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASjG,SAASkG,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5993cc57.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './StartPage.css';\r\n\r\n\r\nconst StartPage = ()=>{\r\n    const transitions = () => {\r\n        const newList = document.querySelector('.newList');\r\n        const colFullwidth = document.querySelector('.col-full-width');\r\n        colFullwidth.classList.toggle('transitionForColFullWidth');\r\n        newList.classList.toggle('hidden');\r\n      }\r\n    return(\r\n        <Fragment>\r\n            <div className=\"col-full-width\">\r\n                <div className=\"form\">\r\n                    <h1><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                    <div className=\"form-group-1\">\r\n\r\n                    <div className=\"newList btn-outline-warning\" roll=\"button\" onClick = {transitions}>\r\n                        <i className=\"fas fa-th-list\"></i>\r\n                        <h5 className=\"font-weight-light \">Start Planning</h5>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default StartPage;","import React, { Fragment } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({createFormforAddingListButtons}) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <header className=\"col\">\r\n                <Navbar expand=\"lg\" className=\"navbar-dark\">\r\n                    <Navbar.Brand href=\"#home\">\r\n                        <h1 className=\"navbar-brand\"><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <li className=\"nav-item item1 ml-auto \">\r\n                                <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"btn btn-outline-secondary wraper\">\r\n                                    <h5 className=\"font-weight-light\">Log In</h5>\r\n                                </button>\r\n                                <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"btn btn-outline-secondary wraper\">\r\n                                    <h5 className=\"font-weight-light\">Register</h5>\r\n                                </button>\r\n                            </li>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n            </header>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport '../Item/Item.css'\r\n\r\nconst Item = ({ handleShow, \r\n                save, \r\n                label, \r\n                modalInput, \r\n                onClick , \r\n                lineThrough, \r\n                checkIcon,\r\n                uncheckIcon,\r\n                index,\r\n                display,\r\n                deleteItem}) => {\r\n\r\n    return (\r\n        <li className=\"li-item\" style={{display}}>\r\n            <div className=\"list-component text-secondary\">\r\n                <div className=\"check-list\">\r\n                <i className=\"far fa-circle\" style ={{display:uncheckIcon}} role=\"button\" onClick={()=>onClick()} aria-hidden=\"true\"></i>\r\n                <i className=\"far fa-check-circle text-success\" style ={{display:checkIcon}} role=\"button\" onClick={()=>onClick()} aria-hidden=\"true\"></i>\r\n                    <p className=\"p-text\" style={{textDecoration: lineThrough}}>\r\n                        {\r\n                            !save ? modalInput : label\r\n                        }\r\n                    </p>\r\n                </div>\r\n                <div className=\"edit-list\">\r\n                    <i id={label} className=\"far fa-times-circle text-danger\"  role=\"button\" onClick={deleteItem} aria-hidden=\"true\"></i>\r\n                    <i id={index} className=\"far fa-edit text-info\" role=\"button\" onClick={(event)=>handleShow(event)} aria-hidden=\"true\"></i>\r\n                    <input className=\"quantity\" type=\"number\" aria-label=\"Insert a number\" name=\"quantity\" min=\"1\" max=\"20\" aria-describedby=\"number of items of the same kind\" placeholder=\"1\" />\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Item;","import React, { Fragment } from 'react';\r\nimport './ButtonName.css';\r\nimport DropdownItem from 'react-bootstrap/DropdownItem';\r\n\r\n\r\nconst ButtonName = ({ onClick, label, windowWidth }) => {\r\n\r\n    const liItem = () => {\r\n\r\n        if (windowWidth < 992) {\r\n            return (\r\n                <DropdownItem className=\"newListLi\" onClick={onClick}>{label}</DropdownItem>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <li className=\"newListLi\"  >\r\n                    <button onClick={onClick} type=\"button\" className=\"btn btn-outline-warning btn-lg btn-block capitalize button-color-orange\">{label}</button>\r\n                </li >\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {liItem()}\r\n        </Fragment>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default ButtonName;\r\n\r\n","import React, { Component, Fragment } from 'react';\nimport StartPage from '../../components/StartPage/StartPage';\nimport Modal from 'react-bootstrap/Modal';\nimport Navigation from '../../components/Navigation/Navigation';\nimport Button from 'react-bootstrap/Button';\nimport '../App/App.css';\nimport Item from \"../../components/Item/Item\";\nimport ButtonName from \"../../components/ButtonName/ButtonName\";\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      windowWidth: 0,\n      activeButtonId: 0,\n      activeButtonName: '',\n      activeItemId: 0,\n      inputAddNewButton: '',\n      inputAddNewItem: '',\n      save: true,\n      modalInput: '',\n      show: false,\n      inputValuesNewItem: [],\n      container: [\n        // {\n        //   id: \"\",\n        //   listItems: [\n        //     {\n        //       item: itemvalue,\n        //       lineThrough: null,\n        //       uncheckIcon: null,\n        //       checkIcon: \"none\",\n        //       display: \"\"\n        //     }\n        //   ]\n        // }\n      ],\n    };\n  }\n\n\n  // Checking Window innerWidth\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => {\n    this.setState({ windowWidth: window.innerWidth });\n  }\n\n\n\n\n  // Adds name for the BUTTON\n  onInputchange = (event) => {\n    this.setState({ inputAddNewButton: event.target.value });\n\n  }\n\n  onInputChangeNewItem = (event) => {\n    this.setState({ inputAddNewItem: event.target.value });\n  }\n\n  // Adds new Button\n  plusNewButton = (event) => {\n    event.preventDefault();\n    if (this.state.inputAddNewButton === \"\") {\n      return\n    }\n\n    const container = [...this.state.container];\n    container.push({ id: this.state.inputAddNewButton, listItems: [] });\n\n    this.setState({\n      container: container,\n      inputAddNewButton: \"\"\n    })\n  }\n\n  // Sets new Button Id and Name\n  setActiveButtonIdAndName = (index) => {\n    const buttonName = this.state.container[index].id;\n\n    this.setState({ activeButtonId: index, activeButtonName: buttonName })\n\n  }\n\n  // Adds new Item to the created list\n  addNewItem = (event) => {\n    event.preventDefault();\n    if (this.state.inputAddNewItem === \"\") {\n      return\n    }\n\n    const container = [...this.state.container];\n    container[this.state.activeButtonId]\n      .listItems\n      .push({\n        item: this.state.inputAddNewItem,\n        lineThrough: null,\n        uncheckIcon: null,\n        checkIcon: \"none\",\n        display: \"\",\n      });\n\n    this.setState({\n      container: container,\n      inputAddNewItem: \"\"\n    })\n\n  }\n\n  // Delete item functionality by clicking the Delete Icon\n  deleteItem = (index) => {\n    const container = [...this.state.container];\n\n    container[this.state.activeButtonId].listItems[index].display = \"none\";\n    this.setState({ container: container });\n  }\n\n\n  // Sets the visibility of \"check\" and \"unchecked\" icons in the item li\n  setItemStyle = (index) => {\n    const container = [...this.state.container];\n\n    if (container[this.state.activeButtonId].listItems[index].lineThrough === null && container[this.state.activeButtonId].listItems[index].checkIcon === \"none\") {\n      container[this.state.activeButtonId].listItems[index].lineThrough = \"line-through\";\n      container[this.state.activeButtonId].listItems[index].uncheckIcon = \"none\";\n      container[this.state.activeButtonId].listItems[index].checkIcon = null;\n    } else {\n      container[this.state.activeButtonId].listItems[index].lineThrough = null;\n      container[this.state.activeButtonId].listItems[index].checkIcon = \"none\";\n      container[this.state.activeButtonId].listItems[index].uncheckIcon = null;\n    }\n    this.setState({ container: container })\n  }\n\n  // Modal Functionality=======================\n\n  modalOnInputChange = (event) => {\n    this.setState({ modalInput: event.target.value });\n  }\n\n  saveModalNewValue = () => {\n    const container = [...this.state.container];\n    container[this.state.activeButtonId].listItems[this.state.activeItemId].item = this.state.modalInput;\n\n    this.setState({ show: false });\n    this.setState({ container: container });\n  }\n\n  handleClose = () => {\n    this.setState({ show: false });\n    this.setState({ show: false });\n\n  }\n\n  handleShow = (event) => {\n    this.setState({\n      show: true,\n      save: true,\n      activeItemId: event.target.id\n    });\n  }\n  // ====================================\n\n\n\n  render() {\n\n    // Sets the moment when the \"dropdownButton\" is visible according to the size of the window\n    const dropdownButtonVisibility = () => {\n      if (this.state.windowWidth < 992) {\n        return null;\n      }\n      else {\n        return \"hidden\"\n      }\n    }\n    // Sets the moment when the \"ul\" is visible according to the size of the window\n    const ulVisibility = () => {\n      if (this.state.windowWidth < 992) {\n        return \"hidden\"\n      }\n      else {\n        return null\n      }\n    }\n\n\n\n\n\n    // Returns the ButtonName component\n    let buttonsToBeRender = null;\n    buttonsToBeRender = (this.state.container.map((value, index) => {\n      return (<ButtonName\n        windowWidth={this.state.windowWidth}\n        onClick={() => this.setActiveButtonIdAndName(index)}\n        key={`${value}${index}`}\n        label={value.id}\n      />)\n    }))\n\n    // Returns the Item component\n    let itemToBeRender = null;\n    if (this.state.container.length !== 0) {\n      itemToBeRender = (this.state.container[this.state.activeButtonId].listItems.map((value, index) => {\n        return (<Item\n          onClick={() => this.setItemStyle(index)}\n          key={`${value}${index}`}\n          index={index}\n          label={value.item}\n          handleShow={(event) => this.handleShow(event)}\n          save={this.state.save}\n          modalInput={this.state.modalInput}\n          lineThrough={value.lineThrough}\n          checkIcon={value.checkIcon}\n          uncheckIcon={value.uncheckIcon}\n          display={value.display}\n          deleteItem={() => this.deleteItem(index)} />)\n      }))\n    }\n\n\n    return (\n      <Fragment>\n        {/*Bootstrap Modal*/}\n        < Modal show={this.state.show} className=\"modal-sm \">\n          <Modal.Header className=\"modal-header text-white\">\n            <Modal.Title>Edit Entry</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <input\n              onChange={this.modalOnInputChange}\n              type=\"text\"\n              className=\"form-control inputForModal\"\n              placeholder=\"Your edit in here\"\n              aria-label=\"edit\"\n              aria-describedby=\"edit an existing entry field\" />\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              id=\"modalCancelButton\"\n              className=\"btn text-white\"\n              onClick={(event) => this.handleClose(event)}>Close</Button>\n            <Button\n              onClick={() => this.saveModalNewValue()}\n              id=\"modalSaveButton\"\n              className=\"btn bg-warning text-white\">Save</Button>\n          </Modal.Footer>\n        </Modal >\n        {/*Modal*/}\n\n        < StartPage />\n\n        <div className=\"container-fluid border border-light\">\n          <div className=\"row\">\n            <Navigation />\n          </div>\n          {/*End Of Row*/}\n\n          <div className=\"row\">\n            <div className=\"col-lg-4 listSummarySection\">\n              <form className=\"form-inline formWraper\" onSubmit ={(event) => this.plusNewButton(event)}>\n                <input\n                  onChange={this.onInputchange}\n                  value={this.state.inputAddNewButton}\n                  type=\"text\"\n                  id=\"inputNewListItem\"\n                  className=\"form-control\"\n                  placeholder=\"Name Your List\"\n                  aria-label=\"Insert text\"\n                  aria-describedby=\"edit an existing entry field\" />\n                <button\n                  onClick={(event) => this.plusNewButton(event)}\n                  type=\"button\"\n                  id=\"plusButton\"\n                  className=\"btn-warning\">+</button>\n              </form>\n\n              <div className=\"myListSummary-wraper\">\n                <DropdownButton\n                  id=\"dropdown-basic-button\"\n                  className={` m-auto capitalize ${dropdownButtonVisibility()}`}\n                  title=\"All Your Lists\"\n                  variant=\"Warning\"\n                  size=\"lg\">\n                  {buttonsToBeRender}\n                </DropdownButton>\n\n                <ul className={`myListSummary ${ulVisibility()}`}>\n                  {buttonsToBeRender}\n                </ul>\n\n              </div>\n            </div>{/*End Of Col-lg-4*/}\n            <div className=\"col-lg-8 list-content\">\n              <form className=\"taskForm\" onSubmit ={(event) => this.addNewItem(event)}>\n                <div className=\"component1\">\n                  <input\n                    onChange={this.onInputChangeNewItem}\n                    value={this.state.inputAddNewItem}\n                    type=\"text\"\n                    className=\"form-control shadow input-new-line\"\n                    placeholder=\"New item\"\n                    aria-label=\"Insert text\"\n                    aria-describedby=\"edit an existing entry field\" />\n                </div>\n                <div\n                  onClick={() => this.addNewItem()}\n                  className=\"component2\"\n                  role=\"button\">\n                  <i className=\"far fa-plus-square\" aria-hidden=\"true\"></i>\n                  <h5 className=\"addTask\">Add new item</h5>\n                </div>\n              </form>\n              <ul className=\"todo-list\">\n                <h3 className=\"todo-name\">{this.state.activeButtonName}</h3>\n\n                {itemToBeRender}\n\n              </ul>\n\n            </div>\n          </div>\n          {/*End Of Row*/}\n        </div>{/*End Of Container Fluid*/}\n      </Fragment >\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}