{"version":3,"sources":["components/StartPage/StartPage.js","components/Navigation/Navigation.js","components/Item/Item.js","components/ButtonName/ButtonName.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["StartPage","className","roll","onClick","newList","document","querySelector","classList","toggle","Navigation","createFormforAddingListButtons","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","type","Item","handleShow","save","label","modalInput","lineThrough","checkIcon","uncheckIcon","index","display","deleteItem","style","role","aria-hidden","textDecoration","event","aria-label","name","min","max","aria-describedby","placeholder","ButtonName","App","updateWindowDimensions","setState","windowWidth","window","innerWidth","onInputchange","inputAddNewButton","target","value","onInputChangeNewItem","inputAddNewItem","plusNewButton","state","container","push","listItems","setActiveButtonIdAndName","buttonName","activeButtonId","activeButtonName","addNewItem","item","setItemStyle","modalOnInputChange","saveModalNewValue","activeItemId","show","handleClose","dropDownButton","inputValuesNewItem","this","addEventListener","removeEventListener","buttonsToBeRender","map","key","itemToBeRender","length","Modal","Header","Title","Body","onChange","Footer","Button","data-toggle","aria-haspopup","aria-expanded","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXA8BeA,G,MA1BG,WAOd,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QACX,4BAAI,0BAAMA,UAAU,gBAAhB,aAAJ,kBACA,yBAAKA,UAAU,gBAEf,yBAAKA,UAAU,8BAA8BC,KAAK,SAASC,QAbvD,WAChB,IAAMC,EAAUC,SAASC,cAAc,YAClBD,SAASC,cAAc,mBAC/BC,UAAUC,OAAO,6BAC9BJ,EAAQG,UAAUC,OAAO,YAUT,uBAAGP,UAAU,mBACb,wBAAIA,UAAU,sBAAd,yB,wBCgBTQ,G,MA/BI,SAAC,GAAqC,EAApCC,+BAEjB,OACI,kBAAC,WAAD,KACI,4BAAQT,UAAU,OACd,kBAACU,EAAA,EAAD,CAAQC,OAAO,KAAKX,UAAU,eAC1B,kBAACU,EAAA,EAAOE,MAAR,CAAcC,KAAK,SACf,wBAAIb,UAAU,gBAAe,0BAAMA,UAAU,gBAAhB,aAA7B,mBAEJ,kBAACU,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKlB,UAAU,WACX,wBAAIA,UAAU,2BACV,4BAAQmB,KAAK,SAASF,GAAG,0BAA0BjB,UAAU,oCACzD,wBAAIA,UAAU,qBAAd,WAEJ,4BAAQmB,KAAK,SAASF,GAAG,0BAA0BjB,UAAU,oCACzD,wBAAIA,UAAU,qBAAd,qB,QCerBoB,G,YAlCF,SAAC,GAUmB,IAVjBC,EAUgB,EAVhBA,WACAC,EASgB,EAThBA,KACAC,EAQgB,EARhBA,MACAC,EAOgB,EAPhBA,WACAtB,EAMgB,EANhBA,QACAuB,EAKgB,EALhBA,YACAC,EAIgB,EAJhBA,UACAC,EAGgB,EAHhBA,YACAC,EAEgB,EAFhBA,MACAC,EACgB,EADhBA,QACAC,EAAgB,EAAhBA,WAEZ,OACI,wBAAI9B,UAAU,UAAU+B,MAAO,CAACF,YAC5B,yBAAK7B,UAAU,iCACX,yBAAKA,UAAU,cACf,uBAAGA,UAAU,gBAAgB+B,MAAQ,CAACF,QAAQF,GAAcK,KAAK,SAAS9B,QAAS,kBAAIA,KAAW+B,cAAY,SAC9G,uBAAGjC,UAAU,mCAAmC+B,MAAQ,CAACF,QAAQH,GAAYM,KAAK,SAAS9B,QAAS,kBAAIA,KAAW+B,cAAY,SAC3H,uBAAGjC,UAAU,SAAS+B,MAAO,CAACG,eAAgBT,IAErCH,EAAoBC,EAAbC,IAIpB,yBAAKxB,UAAU,aACX,uBAAGiB,GAAIM,EAAOvB,UAAU,kCAAmCgC,KAAK,SAAS9B,QAAS4B,EAAYG,cAAY,SAC1G,uBAAGhB,GAAIW,EAAO5B,UAAU,wBAAwBgC,KAAK,SAAS9B,QAAS,SAACiC,GAAD,OAASd,EAAWc,IAAQF,cAAY,SAC/G,2BAAOjC,UAAU,WAAWmB,KAAK,SAASiB,aAAW,kBAAkBC,KAAK,WAAWC,IAAI,IAAIC,IAAI,KAAKC,mBAAiB,mCAAmCC,YAAY,WCd7KC,G,MAZI,SAAC,GAAqB,IAApBnB,EAAmB,EAAnBA,MAAMrB,EAAa,EAAbA,QAGvB,OACS,wBAAKF,UAAU,aACX,4BAASE,QAASA,EAASiB,KAAK,SAASnB,UAAU,4EAA4EuB,MC2TjIoB,E,YA1Tb,aAAe,IAAD,8BACZ,+CAyCJC,uBAAyB,WACvB,EAAKC,SAAS,CAAEC,YAAaC,OAAOC,cA3CtB,EAkDhBC,cAAgB,SAACd,GACf,EAAKU,SAAS,CAAEK,kBAAmBf,EAAMgB,OAAOC,SAnDlC,EAuDhBC,qBAAuB,SAAClB,GACtB,EAAKU,SAAS,CAAES,gBAAiBnB,EAAMgB,OAAOC,SAxDhC,EA4DhBG,cAAgB,WACd,GAAqC,KAAjC,EAAKC,MAAMN,kBAAf,CAIA,IAAMO,EAAS,YAAO,EAAKD,MAAMC,WACjCA,EAAUC,KAAK,CAAEzC,GAAI,EAAKuC,MAAMN,kBAAmBS,UAAW,KAE9D,EAAKd,SAAS,CACZY,UAAWA,EACXP,kBAAmB,OAtEP,EA2EhBU,yBAA2B,SAAChC,GAC1B,IAAMiC,EAAa,EAAKL,MAAMC,UAAU7B,GAAOX,GAE/C,EAAK4B,SAAS,CAAEiB,eAAgBlC,EAAOmC,iBAAkBF,KA9E3C,EAmFhBG,WAAa,WACX,GAAmC,KAA/B,EAAKR,MAAMF,gBAAf,CAIA,IAAMG,EAAS,YAAO,EAAKD,MAAMC,WACjCA,EAAU,EAAKD,MAAMM,gBAClBH,UACAD,KAAK,CAAEO,KAAM,EAAKT,MAAMF,gBACjB7B,YAAa,KACbE,YAAY,KACZD,UAAU,OACVG,QAAQ,KAGlB,EAAKgB,SAAS,CACZY,UAAWA,EACXH,gBAAiB,OApGL,EA0GhBxB,WAAa,SAACF,GACZ,IAAM6B,EAAS,YAAO,EAAKD,MAAMC,WAE/BA,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOC,QAAU,OAChE,EAAKgB,SAAS,CAACY,UAAUA,KA9Gb,EAmHhBS,aAAe,SAACtC,GACd,IAAM6B,EAAS,YAAO,EAAKD,MAAMC,WAEyC,OAAtEA,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOH,aAA4F,SAApEgC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOF,WACtI+B,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOH,YAAc,eACpEgC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOD,YAAc,OACpE8B,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOF,UAAY,OAElE+B,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOH,YAAc,KACpEgC,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOF,UAAY,OAClE+B,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU/B,GAAOD,YAAc,MAEtE,EAAKkB,SAAS,CAAEY,UAAWA,KA/Hb,EAoIhBU,mBAAqB,SAAChC,GACpB,EAAKU,SAAS,CAAErB,WAAYW,EAAMgB,OAAOC,SArI3B,EAwIhBgB,kBAAoB,WAClB,IAAMX,EAAS,YAAO,EAAKD,MAAMC,WACjCA,EAAU,EAAKD,MAAMM,gBAAgBH,UAAU,EAAKH,MAAMa,cAAcJ,KAAO,EAAKT,MAAMhC,WAE1F,EAAKqB,SAAS,CAAEyB,MAAM,IACtB,EAAKzB,SAAS,CAAEY,UAAWA,KA7Ib,EAgJhBc,YAAc,WACZ,EAAK1B,SAAS,CAAEyB,MAAM,IACtB,EAAKzB,SAAS,CAAEyB,MAAM,KAlJR,EAsJhBjD,WAAa,SAACc,GACZ,EAAKU,SAAS,CACZyB,MAAM,EACNhD,MAAM,EACN+C,aAAalC,EAAMgB,OAAOlC,MAvJ1B,EAAKuC,MAAQ,CACXV,YAAY,EACZ0B,eAAe,SACfV,eAAgB,EAChBC,iBAAkB,GAClBM,aAAc,EACdnB,kBAAmB,GACnBI,gBAAiB,GACjBhC,MAAM,EACNE,WAAY,GACZ8C,MAAM,EACNG,mBAAoB,GACpBhB,UAAW,IAfD,E,iFAiCdiB,KAAK9B,yBACLG,OAAO4B,iBAAiB,SAAUD,KAAK9B,0B,6CAKvCG,OAAO6B,oBAAoB,SAAUF,KAAK9B,0B,+BA0HlC,IAaJiC,EAbG,OAcPA,EAAqBH,KAAKlB,MAAMC,UAAUqB,KAAI,SAAC1B,EAAOxB,GACpD,OAAQ,kBAAC,EAAD,CACN1B,QAAS,kBAAM,EAAK0D,yBAAyBhC,IAC7CmD,IAAG,UAAK3B,GAAL,OAAaxB,GAChBL,MAAO6B,EAAMnC,QAKjB,IAAI+D,EAAiB,KAoBrB,OAnBoC,IAAhCN,KAAKlB,MAAMC,UAAUwB,SACvBD,EAAkBN,KAAKlB,MAAMC,UAAUiB,KAAKlB,MAAMM,gBAAgBH,UAAUmB,KAAI,SAAC1B,EAAOxB,GACtF,OAAQ,kBAAC,EAAD,CACN1B,QAAS,kBAAM,EAAKgE,aAAatC,IACjCmD,IAAG,UAAK3B,GAAL,OAAaxB,GAChBA,MAAOA,EACPL,MAAO6B,EAAMa,KACb5C,WAAY,SAACc,GAAD,OAAS,EAAKd,WAAWc,IACrCb,KAAM,EAAKkC,MAAMlC,KACjBE,WAAY,EAAKgC,MAAMhC,WACvBC,YAAa2B,EAAM3B,YACnBC,UAAa0B,EAAM1B,UACnBC,YAAeyB,EAAMzB,YACrBE,QAAWuB,EAAMvB,QACjBC,WAAc,kBAAI,EAAKA,WAAWF,UAMtC,kBAAC,WAAD,KAEE,kBAAEsD,EAAA,EAAF,CAAQZ,KAAMI,KAAKlB,MAAMc,KAAMtE,UAAU,aACvC,kBAACkF,EAAA,EAAMC,OAAP,CAAcnF,UAAU,2BACtB,kBAACkF,EAAA,EAAME,MAAP,oBAGF,kBAACF,EAAA,EAAMG,KAAP,KACE,2BACEC,SAAUZ,KAAKP,mBACfhD,KAAK,OACLnB,UAAU,6BACVyC,YAAY,oBACZL,aAAW,OACXI,mBAAiB,kCAGrB,kBAAC0C,EAAA,EAAMK,OAAP,KACE,kBAACC,EAAA,EAAD,CACEvE,GAAG,oBACHjB,UAAU,iBACVE,QAAS,SAACiC,GAAD,OAAW,EAAKoC,YAAYpC,KAHvC,SAIA,kBAACqD,EAAA,EAAD,CACEtF,QAAS,kBAAM,EAAKkE,qBACpBnD,GAAG,kBACHjB,UAAU,6BAHZ,UAQJ,kBAAE,EAAF,MAEA,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAIF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,+BACb,0BAAMA,UAAU,0BACd,2BACEsF,SAAUZ,KAAKzB,cACfG,MAAOsB,KAAKlB,MAAMN,kBAClB/B,KAAK,OACLF,GAAG,mBACHjB,UAAU,eACVyC,YAAY,iBACZL,aAAW,cACXI,mBAAiB,iCACnB,4BACEtC,QAAS,kBAAM,EAAKqD,iBACpBpC,KAAK,SACLF,GAAG,aACHjB,UAAU,eAJZ,MAOF,yBAAKA,UAAU,wBACb,4BACEmB,KAAK,SACLF,GAAG,qBACHjB,UAAS,8EArGlB,EAAKwD,MAAMV,YAAY,IAChB,KAGA,UAkGE2C,cAAY,WACZC,gBAAc,OACdC,gBAAc,SANhB,kBAOA,wBAAI1E,GAAG,qBAAqBjB,UAAU,iBAEnC6E,KAKP,yBAAK7E,UAAU,yBACb,0BAAMA,UAAU,YACd,yBAAKA,UAAU,cACb,2BACEsF,SAAUZ,KAAKrB,qBACfD,MAAOsB,KAAKlB,MAAMF,gBAClBnC,KAAK,OACLnB,UAAU,qCACVyC,YAAY,WACZL,aAAW,cACXI,mBAAiB,kCAErB,yBACEtC,QAAS,kBAAM,EAAK8D,cACpBhE,UAAU,aACVgC,KAAK,UACL,uBAAGhC,UAAU,qBAAqBiC,cAAY,SAC9C,wBAAIjC,UAAU,WAAd,kBAGJ,wBAAIA,UAAU,aACZ,wBAAIA,UAAU,aAAa0E,KAAKlB,MAAMO,kBAErCiB,W,GA7SGY,a,MCGEC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAS9F,SAAS+F,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ad722cd.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './StartPage.css';\r\n\r\n\r\nconst StartPage = ()=>{\r\n    const transitions = () => {\r\n        const newList = document.querySelector('.newList');\r\n        const colFullwidth = document.querySelector('.col-full-width');\r\n        colFullwidth.classList.toggle('transitionForColFullWidth');\r\n        newList.classList.toggle('hidden');\r\n      }\r\n    return(\r\n        <Fragment>\r\n            <div className=\"col-full-width\">\r\n                <div className=\"form\">\r\n                    <h1><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                    <div className=\"form-group-1\">\r\n\r\n                    <div className=\"newList btn-outline-warning\" roll=\"button\" onClick = {transitions}>\r\n                        <i className=\"fas fa-th-list\"></i>\r\n                        <h5 className=\"font-weight-light \">Start Planning</h5>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default StartPage;","import React, { Fragment } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({createFormforAddingListButtons}) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <header className=\"col\">\r\n                <Navbar expand=\"lg\" className=\"navbar-dark\">\r\n                    <Navbar.Brand href=\"#home\">\r\n                        <h1 className=\"navbar-brand\"><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <li className=\"nav-item item1 ml-auto \">\r\n                                <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"btn btn-outline-secondary wraper\">\r\n                                    <h5 className=\"font-weight-light\">Log In</h5>\r\n                                </button>\r\n                                <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"btn btn-outline-secondary wraper\">\r\n                                    <h5 className=\"font-weight-light\">Register</h5>\r\n                                </button>\r\n                            </li>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n            </header>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport '../Item/Item.css'\r\n\r\nconst Item = ({ handleShow, \r\n                save, \r\n                label, \r\n                modalInput, \r\n                onClick , \r\n                lineThrough, \r\n                checkIcon,\r\n                uncheckIcon,\r\n                index,\r\n                display,\r\n                deleteItem}) => {\r\n\r\n    return (\r\n        <li className=\"li-item\" style={{display}}>\r\n            <div className=\"list-component text-secondary\">\r\n                <div className=\"check-list\">\r\n                <i className=\"far fa-circle\" style ={{display:uncheckIcon}} role=\"button\" onClick={()=>onClick()} aria-hidden=\"true\"></i>\r\n                <i className=\"far fa-check-circle text-success\" style ={{display:checkIcon}} role=\"button\" onClick={()=>onClick()} aria-hidden=\"true\"></i>\r\n                    <p className=\"p-text\" style={{textDecoration: lineThrough}}>\r\n                        {\r\n                            !save ? modalInput : label\r\n                        }\r\n                    </p>\r\n                </div>\r\n                <div className=\"edit-list\">\r\n                    <i id={label} className=\"far fa-times-circle text-danger\"  role=\"button\" onClick={deleteItem} aria-hidden=\"true\"></i>\r\n                    <i id={index} className=\"far fa-edit text-info\" role=\"button\" onClick={(event)=>handleShow(event)} aria-hidden=\"true\"></i>\r\n                    <input className=\"quantity\" type=\"number\" aria-label=\"Insert a number\" name=\"quantity\" min=\"1\" max=\"20\" aria-describedby=\"number of items of the same kind\" placeholder=\"1\" />\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport './ButtonName.css';\r\n\r\n\r\nconst ButtonName = ({label,onClick}) => {\r\n    \r\n\r\n    return (\r\n             <li  className=\"newListLi\" >\r\n                 <button  onClick={onClick} type=\"button\" className=\"btn btn-outline-warning btn-lg btn-block capitalize button-color-orange \">{label}</button>\r\n            </li>\r\n         \r\n    );\r\n\r\n}\r\n\r\nexport default ButtonName;\r\n\r\n","import React, { Component, Fragment } from 'react';\nimport StartPage from '../../components/StartPage/StartPage';\nimport Modal from 'react-bootstrap/Modal';\nimport Navigation from '../../components/Navigation/Navigation';\nimport Button from 'react-bootstrap/Button';\nimport '../App/App.css';\nimport Item from \"../../components/Item/Item\";\nimport ButtonName from \"../../components/ButtonName/ButtonName\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    // this.todoList = React.createRef();\n    this.state = {\n      windowWidth:0,\n      dropDownButton:\"hidden\",\n      activeButtonId: 0,\n      activeButtonName: '',\n      activeItemId: 0,\n      inputAddNewButton: '',\n      inputAddNewItem: '',\n      save: true,\n      modalInput: '',\n      show: false,\n      inputValuesNewItem: [],\n      container: [\n      //   { id:\"\",   \n      //     listItems: [\n      //     {\n      //       item: itemvalue,\n      //       lineThrough: null / line - through,\n      //       vizibility: true\n      //     }\n      //   ]\n      // } \n      ],\n  };\n}\n\n\n// Checking Window innerWidth\n\ncomponentDidMount() {\n  this.updateWindowDimensions();\n  window.addEventListener('resize', this.updateWindowDimensions);\n}\n\n\ncomponentWillUnmount() {\n  window.removeEventListener('resize', this.updateWindowDimensions);\n}\n\nupdateWindowDimensions = ()=>{\n  this.setState({ windowWidth: window.innerWidth });\n}\n\n\n\n\n// Adds name for the BUTTON\nonInputchange = (event) => {\n  this.setState({ inputAddNewButton: event.target.value });\n\n}\n\nonInputChangeNewItem = (event) => {\n  this.setState({ inputAddNewItem: event.target.value });\n}\n\n// Adds new Button\nplusNewButton = () => {\n  if (this.state.inputAddNewButton === \"\") {\n    return\n  }\n\n  const container = [...this.state.container];\n  container.push({ id: this.state.inputAddNewButton, listItems: [] });\n\n  this.setState({\n    container: container,\n    inputAddNewButton: \"\"\n  })\n}\n\n// Sets new Button Id and Name\nsetActiveButtonIdAndName = (index) => {\n  const buttonName = this.state.container[index].id;\n\n  this.setState({ activeButtonId: index, activeButtonName: buttonName })\n\n}\n\n// Adds new Item to the created list\naddNewItem = () => {\n  if (this.state.inputAddNewItem === \"\") {\n    return\n  }\n\n  const container = [...this.state.container];\n  container[this.state.activeButtonId]\n    .listItems\n    .push({ item: this.state.inputAddNewItem, \n            lineThrough: null,\n            uncheckIcon:null, \n            checkIcon:\"none\",\n            display:\"\",\n          });\n\n  this.setState({\n    container: container,\n    inputAddNewItem: \"\"\n  })\n\n}\n\n// Delete item functionality by clicking the Delete Icon\ndeleteItem = (index)=>{\n  const container = [...this.state.container];\n   \n    container[this.state.activeButtonId].listItems[index].display = \"none\";\n    this.setState({container:container});\n}\n\n\n// Sets the visibility of \"check\" and \"unchecked\" icons in the item\nsetItemStyle = (index) => {\n  const container = [...this.state.container];\n\n  if (container[this.state.activeButtonId].listItems[index].lineThrough === null && container[this.state.activeButtonId].listItems[index].checkIcon === \"none\" ) {\n    container[this.state.activeButtonId].listItems[index].lineThrough = \"line-through\";\n    container[this.state.activeButtonId].listItems[index].uncheckIcon = \"none\";\n    container[this.state.activeButtonId].listItems[index].checkIcon = null;\n  } else {\n    container[this.state.activeButtonId].listItems[index].lineThrough = null;\n    container[this.state.activeButtonId].listItems[index].checkIcon = \"none\";\n    container[this.state.activeButtonId].listItems[index].uncheckIcon = null;\n  }\n  this.setState({ container: container })\n}\n\n// Modal Functionality=======================\n\nmodalOnInputChange = (event) => {\n  this.setState({ modalInput: event.target.value });\n}\n\nsaveModalNewValue = () => {\n  const container = [...this.state.container];\n  container[this.state.activeButtonId].listItems[this.state.activeItemId].item = this.state.modalInput;\n\n  this.setState({ show: false });\n  this.setState({ container: container });\n}\n\nhandleClose = () => {\n  this.setState({ show: false });\n  this.setState({ show: false });\n\n}\n\nhandleShow = (event) => {\n  this.setState({ \n    show: true, \n    save: true,\n    activeItemId:event.target.id\n  });\n}\n// ====================================\n\n\n\nrender() {\n\n  // Sets the moment when the dropdownButton is visible according to the size of the window\n  const dropDownButtonVisibility = ()=>{\n    if(this.state.windowWidth<992){\n      return  null;\n    }\n    else{\n      return  \"hidden\";\n    }\n  }\n\n// Returns the ButtonName component\n  let buttonsToBeRender = null;\n  buttonsToBeRender = (this.state.container.map((value, index) => {\n    return (<ButtonName\n      onClick={() => this.setActiveButtonIdAndName(index)}\n      key={`${value}${index}`}\n      label={value.id}\n    />)\n  }))\n\n// Returns the Item component\n  let itemToBeRender = null;\n  if (this.state.container.length !== 0) {\n    itemToBeRender = (this.state.container[this.state.activeButtonId].listItems.map((value, index) => {\n      return (<Item\n        onClick={() => this.setItemStyle(index)}\n        key={`${value}${index}`}\n        index={index}\n        label={value.item}\n        handleShow={(event)=>this.handleShow(event)}\n        save={this.state.save}\n        modalInput={this.state.modalInput}\n        lineThrough={value.lineThrough}\n        checkIcon = {value.checkIcon} \n        uncheckIcon = {value.uncheckIcon}\n        display = {value.display}\n        deleteItem = {()=>this.deleteItem(index)}/>)\n    }))\n  }\n\n\n  return (\n    <Fragment>\n      {/*Bootstrap Modal*/}\n      < Modal show={this.state.show} className=\"modal-sm \">\n        <Modal.Header className=\"modal-header text-white\">\n          <Modal.Title>Edit Entry</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <input\n            onChange={this.modalOnInputChange}\n            type=\"text\"\n            className=\"form-control inputForModal\"\n            placeholder=\"Your edit in here\"\n            aria-label=\"edit\"\n            aria-describedby=\"edit an existing entry field\" />\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button\n            id=\"modalCancelButton\"\n            className=\"btn text-white\"\n            onClick={(event) => this.handleClose(event)}>Close</Button>\n          <Button\n            onClick={() => this.saveModalNewValue()}\n            id=\"modalSaveButton\"\n            className=\"btn bg-warning text-white\">Save</Button>\n        </Modal.Footer>\n      </Modal >\n      {/*Modal*/}\n\n      < StartPage />\n\n      <div className=\"container-fluid border border-light\">\n        <div className=\"row\">\n          <Navigation />\n        </div>\n        {/*End Of Row*/}\n\n        <div className=\"row\">\n          <div className=\"col-lg-4 listSummarySection\">\n            <form className=\"form-inline formWraper\">\n              <input\n                onChange={this.onInputchange}\n                value={this.state.inputAddNewButton}\n                type=\"text\"\n                id=\"inputNewListItem\"\n                className=\"form-control\"\n                placeholder=\"Name Your List\"\n                aria-label=\"Insert text\"\n                aria-describedby=\"edit an existing entry field\" />\n              <button\n                onClick={() => this.plusNewButton()}\n                type=\"button\"\n                id=\"plusButton\"\n                className=\"btn-warning\">+</button>\n            </form>\n\n            <div className=\"myListSummary-wraper\">\n              <button\n                type=\"button\"\n                id=\"dropdownMenuButton\"\n                className={`btn btn-outline-warning dropdown-toggle btn-lg btn-block capitalize ${dropDownButtonVisibility()}`}\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\">All Your Lists</button>\n              <ul id=\"myListSummaryReact\" className=\"myListSummary\">\n\n                {buttonsToBeRender}\n\n              </ul>\n            </div>\n          </div>{/*End Of Col-lg-4*/}\n          <div className=\"col-lg-8 list-content\">\n            <form className=\"taskForm\">\n              <div className=\"component1\">\n                <input\n                  onChange={this.onInputChangeNewItem}\n                  value={this.state.inputAddNewItem}\n                  type=\"text\"\n                  className=\"form-control shadow input-new-line\"\n                  placeholder=\"New item\"\n                  aria-label=\"Insert text\"\n                  aria-describedby=\"edit an existing entry field\" />\n              </div>\n              <div\n                onClick={() => this.addNewItem()}\n                className=\"component2\"\n                role=\"button\">\n                <i className=\"far fa-plus-square\" aria-hidden=\"true\"></i>\n                <h5 className=\"addTask\">Add new item</h5>\n              </div>\n            </form>\n            <ul className=\"todo-list\">\n              <h3 className=\"todo-name\">{this.state.activeButtonName}</h3>\n\n              {itemToBeRender}\n\n            </ul>\n\n          </div>\n        </div>\n        {/*End Of Row*/}\n      </div>{/*End Of Container Fluid*/}\n    </Fragment >\n\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}