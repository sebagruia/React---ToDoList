{"version":3,"sources":["components/StartPage/StartPage.js","components/Modalpopup/Modalpopup.js","components/Navigation/Navigation.js","components/Item/Item.js","components/ButtonName/ButtonName.js","components/Login/Login.js","components/Register/Register.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["StartPage","useState","transitionClass","setTransitionClass","visibility","setVisibility","className","roll","onClick","Modalpopup","show","onChange","handleClose","saveModalNewValue","Modal","Header","Title","Body","event","type","placeholder","aria-label","aria-describedby","Footer","Button","id","Navigation","onRouteChange","changeLogStateToFalse","isLogedIn","loadUser","user","initialUser","name","email","container","joined","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","Item","handleShow","save","label","modalInput","lineThrough","checkIcon","uncheckIcon","index","display","deleteItem","style","role","aria-hidden","textDecoration","min","max","ButtonName","windowWidth","DropdownItem","Login","changeLogStateToTrue","validated","setValidated","loginEmail","setLoginEmail","loginPass","setLoginPass","Form","noValidate","onSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","Group","controlId","Label","Control","required","target","value","Feedback","variant","password","parsedContainer","map","element","parse","window","alert","Register","registerName","setRegisterName","registerEmail","setRegisterEmail","registerPass","setRegisterPass","App","setState","route","updateWindowDimensions","innerWidth","onInputchange","inputAddNewButton","onInputChangeNewItem","inputAddNewItem","plusNewButton","state","push","listItems","setActiveButtonIdAndName","buttonName","activeButtonId","activeButtonName","addNewItem","item","setItemStyle","modalOnInputChange","activeItemId","inputValuesNewItem","this","addEventListener","removeEventListener","buttonsToBeRender","length","key","itemToBeRender","DropdownButton","title","size","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3b549de.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport './StartPage.css';\r\n\r\n\r\n\r\nconst StartPage = () => {\r\n    const [transitionClass, setTransitionClass] = useState('');\r\n    const [visibility, setVisibility] = useState('');\r\n\r\n\r\n    const fireTransitionAndVisibility = () => {\r\n        setTransitionClass('transitionForColFullWidth');\r\n        setVisibility('hidden');\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={`col-full-width ${transitionClass}`}>\r\n                <div className=\"form\">\r\n                    <h1><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                    <div className=\"form-group-1\">\r\n\r\n                        <div className={`newList btn-outline-warning ${visibility}`} roll=\"button\" onClick={fireTransitionAndVisibility}>\r\n                            <i className=\"fas fa-th-list\"></i>\r\n                            <h5 className=\"font-weight-light \">Start Planning</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default StartPage;","import React from 'react';\r\nimport '../Modalpopup/Modalpopup.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst Modalpopup = ({ show, onChange, handleClose, saveModalNewValue }) => {\r\n    return (\r\n        \r\n        < Modal show = { show } >\r\n            <Modal.Header className=\"modal-header text-white\">\r\n                <Modal.Title>Edit Entry</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <input\r\n                    onChange={(event)=>onChange(event)}\r\n                    type=\"text\"\r\n                    className=\"form-control inputForModal\"\r\n                    placeholder=\"Your edit in here\"\r\n                    aria-label=\"edit\"\r\n                    aria-describedby=\"edit an existing entry field\" />\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button\r\n                    id=\"modalCancelButton\"\r\n                    className=\"btn text-white\"\r\n                    onClick={(event) => handleClose(event)}>Close</Button>\r\n                <Button\r\n                    onClick={() =>saveModalNewValue()}\r\n                    id=\"modalSaveButton\"\r\n                    className=\"btn bg-warning text-white\">Save</Button>\r\n            </Modal.Footer>\r\n            </Modal >\r\n  \r\n    );\r\n}\r\n\r\n\r\nexport default Modalpopup;\r\n","import React, { Fragment } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({onRouteChange,changeLogStateToFalse, isLogedIn,loadUser,user}) => {\r\nconst initialUser = {\r\n    // id:user.id,\r\n    name: '',\r\n    email:'',\r\n    container: [],\r\n    joined: ''\r\n}\r\nconst saveAndExitFunctionalities = ()=>{\r\n    onRouteChange('login');\r\n    changeLogStateToFalse();\r\n    loadUser(initialUser);\r\nconsole.log(user.email);\r\nconsole.log(user.container);\r\n    fetch('http://localhost:4000/save&exit',{\r\n        method:'put',\r\n        headers:{'Content-Type':'application/json'},\r\n        body:JSON.stringify({\r\n            email:user.email,\r\n            container:user.container\r\n        })\r\n    })\r\n    .then(response=>response.json());\r\n    // .then(confirmation=>confirmation.json());\r\n    \r\n\r\n}\r\n\r\n    if(!isLogedIn){\r\n        return (\r\n            <Fragment>\r\n                <header className=\"col\">\r\n                    <Navbar expand=\"lg\" className=\"navbar-dark\">\r\n                        <Navbar.Brand href=\"#home\" onClick={()=>onRouteChange('home')}>\r\n                            <h1 className=\"navbar-brand\"><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <li className=\"nav-item item1 ml-auto \">\r\n                                    <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"loginButton btn btn-outline-secondary wraper\" onClick={()=>onRouteChange('login')}>\r\n                                        <h5 className=\"font-weight-light\">Log In</h5>\r\n                                    </button>\r\n                                    <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"registerButton btn btn-outline-secondary wraper\" onClick={()=>onRouteChange('register')}>\r\n                                        <h5 className=\"font-weight-light\">Register</h5>\r\n                                    </button>\r\n                                </li>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                </header>\r\n            </Fragment>\r\n        );\r\n\r\n    }\r\n\r\n    else{\r\n        return (\r\n            <Fragment>\r\n                <header className=\"col\">\r\n                    <Navbar expand=\"lg\" className=\"navbar-dark\">\r\n                        <Navbar.Brand href=\"#home\">\r\n                            <h1 className=\"navbar-brand\"><span className=\"changedStyle\">Do things</span> The Right Way</h1>\r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <li className=\"nav-item item1 ml-auto \">\r\n                                    <h5 className=\"welcome\"> Welcome {`${user.name}`}</h5>\r\n                                    <button type=\"button\" id=\"buttonForAddingToDoList\" className=\"saveExitButton btn btn-outline-secondary wraper\" onClick={()=>saveAndExitFunctionalities()}>\r\n                                        <h5>Save & Exit</h5>\r\n                                    </button>\r\n                                </li>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                </header>\r\n            </Fragment>\r\n    \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport '../Item/Item.css'\r\n\r\nconst Item = ({ handleShow, \r\n                save, \r\n                label, \r\n                modalInput, \r\n                onClick , \r\n                lineThrough, \r\n                checkIcon,\r\n                uncheckIcon,\r\n                index,\r\n                display,\r\n                deleteItem}) => {\r\n\r\n    return (\r\n        <li className=\"li-item\" style={{display}}>\r\n            <div className=\"list-component text-secondary\">\r\n                <div className=\"check-list\">\r\n                <i className=\"far fa-circle\" style ={{display:uncheckIcon}} role=\"button\" onClick={()=>onClick()} aria-hidden=\"true\"></i>\r\n                <i className=\"far fa-check-circle text-success\" style ={{display:checkIcon}} role=\"button\" onClick={()=>onClick()} aria-hidden=\"true\"></i>\r\n                    <p className=\"p-text\" style={{textDecoration: lineThrough}}>\r\n                        {\r\n                            !save ? modalInput : label\r\n                        }\r\n                    </p>\r\n                </div>\r\n                <div className=\"edit-list\">\r\n                    <i id={label} className=\"far fa-times-circle text-danger\"  role=\"button\" onClick={deleteItem} aria-hidden=\"true\"></i>\r\n                    <i id={index} className=\"far fa-edit text-info\" role=\"button\" onClick={(event)=>handleShow(event)} aria-hidden=\"true\"></i>\r\n                    <input className=\"quantity\" type=\"number\" aria-label=\"Insert a number\" name=\"quantity\" min=\"1\" max=\"20\" aria-describedby=\"number of items of the same kind\" placeholder=\"1\" />\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Item;","import React, { Fragment } from 'react';\r\nimport './ButtonName.css';\r\nimport DropdownItem from 'react-bootstrap/DropdownItem';\r\n\r\n\r\nconst ButtonName = ({ onClick, label, windowWidth }) => {\r\n\r\n    const liItem = () => {\r\n\r\n        if (windowWidth < 992) {\r\n            return (\r\n                <DropdownItem className=\"newListLi\" onClick={onClick}>{label}</DropdownItem>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <li className=\"newListLi\"  >\r\n                    <button onClick={onClick} type=\"button\" className=\"btn btn-outline-warning btn-lg btn-block capitalize button-color-orange\">{label}</button>\r\n                </li >\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {liItem()}\r\n        </Fragment>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default ButtonName;\r\n\r\n","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Login = ({ onRouteChange, changeLogStateToTrue, loadUser}) => {\r\n\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const [loginEmail, setLoginEmail] = useState('');\r\n    const [loginPass, setLoginPass] = useState('');\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n    };\r\n\r\n    const onEmailChange = (event) => {\r\n        setLoginEmail(event.target.value);\r\n    }\r\n    const onPassChange = (event) => {\r\n        setLoginPass(event.target.value);\r\n    }\r\n\r\n    const onLogInClick = (event) => {\r\n        fetch('http://localhost:4000/login', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                email: loginEmail,\r\n                password: loginPass\r\n            })\r\n        })\r\n            .then(response=>response.json())\r\n            .then(user=>{\r\n                console.log(user);\r\n                if(user.id){\r\n                    //Because the response of the \"user.container\" was a String and not a Json I had to Parse the \"user.container\"\r\n                   let parsedContainer =  user.container.map((element)=>{\r\n                        let parsedElement = JSON.parse(element);\r\n                        return parsedElement;\r\n                    });\r\n                    user.container = parsedContainer;\r\n                    //=====================================================================\r\n                    console.log(user);\r\n                    onRouteChange('home');\r\n                    changeLogStateToTrue();\r\n                    loadUser(user);\r\n                }\r\n                else{\r\n                    window.alert('Wrong Credentials');\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 offset-sm-3\">\r\n                    <Form className=\"login-form justify-content-center\" noValidate validated={validated} onSubmit={handleSubmit} >\r\n\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" required onChange={onEmailChange} />\r\n                            <Form.Control.Feedback type=\"invalid\">Please type an email address</Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"valid\">Looks Good</Form.Control.Feedback>\r\n\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" required onChange={onPassChange} />\r\n                            <Form.Control.Feedback type=\"invalid\">Please type your password</Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"valid\">Looks Good</Form.Control.Feedback>\r\n\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\" onClick={onLogInClick} >\r\n                            Log In\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport './Register.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Register = ({onRouteChange, loadUser, changeLogStateToTrue}) => {\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const [registerName, setRegisterName] = useState('');\r\n    const [registerEmail, setRegisterEmail] = useState('');\r\n    const [registerPass, setRegisterPass] = useState('');\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n    };\r\n\r\n    const onNameChange = (event) => {\r\n        setRegisterName(event.target.value);\r\n    }\r\n    const onEmailChange = (event) => {\r\n        setRegisterEmail(event.target.value);\r\n    }\r\n    const onPassChange = (event) => {\r\n        setRegisterPass(event.target.value);\r\n    }\r\n\r\n    const onRegisterClick = ()=>{\r\n        fetch('http://localhost:4000/register', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                name:registerName,\r\n                email: registerEmail,\r\n                password: registerPass\r\n            })\r\n        })\r\n            .then(response=>response.json())\r\n            .then(user=>{\r\n                if(user.name){\r\n                    loadUser(user);\r\n                    onRouteChange('home');\r\n                    changeLogStateToTrue();\r\n                }\r\n            })\r\n       }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 offset-sm-3\">\r\n                    <Form className=\"register-form justify-content-center\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n                        <Form.Group controlId=\"formBasicName\">\r\n                            <Form.Label className=\"label\">Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter Name\" required onChange={onNameChange}/>\r\n                            <Form.Control.Feedback type=\"invalid\">Please type your name</Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"valid\">Looks Good</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" required onChange={onEmailChange} />\r\n                            <Form.Control.Feedback type=\"invalid\">Please type an email address</Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"valid\">Looks Good</Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" required onChange={onPassChange} />\r\n                            <Form.Control.Feedback type=\"invalid\">Please type your password</Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"valid\">Looks Good</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\" onClick={onRegisterClick} >\r\n                            Register\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Register;","import React, { Component, Fragment } from 'react';\nimport StartPage from '../../components/StartPage/StartPage';\nimport Modalpopup from '../../components/Modalpopup/Modalpopup';\nimport Navigation from '../../components/Navigation/Navigation';\nimport '../App/App.css';\nimport Item from \"../../components/Item/Item\";\nimport ButtonName from \"../../components/ButtonName/ButtonName\";\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Login from '../../components/Login/Login';\nimport Register from '../../components/Register/Register';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      route: 'home',\n      isLogedIn: false,\n      windowWidth: 0,\n      activeButtonId: 0,\n      activeButtonName: '',\n      activeItemId: 0,\n      inputAddNewButton: '',\n      inputAddNewItem: '',\n      save: true,\n      modalInput: '',\n      show: false,\n      inputValuesNewItem: [],\n      user: {\n        name: '',\n        email: '',\n        container: [\n          // {\n          //   id: \"\",\n          //   listItems: [\n          //     {\n          //       item: itemvalue,\n          //       lineThrough: null,\n          //       uncheckIcon: null,\n          //       checkIcon: \"none\",\n          //       display: \"\"\n          //     }\n          //   ]\n          // }\n        ],\n        joined: ''\n      }\n    };\n  }\n\n\n  loadUser = (user) => {\n    this.setState({\n      user: {\n        // id:user.id,\n        name: user.name,\n        email: user.email,\n        container: user.container,\n        joined: user.joined\n      }\n    });\n\n  }\n\n  onRouteChange = (route) => {\n    this.setState({ route: route });\n  }\n\n  changeLogStateToFalse = () => {\n      this.setState({ isLogedIn: false });\n  }\n  changeLogStateToTrue = () => {\n      this.setState({ isLogedIn: true });\n  }\n\n\n  // Checking Window innerWidth\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => {\n    this.setState({ windowWidth: window.innerWidth });\n  }\n\n\n\n\n  // Adds name for the BUTTON\n  onInputchange = (event) => {\n    this.setState({ inputAddNewButton: event.target.value });\n\n  }\n\n  onInputChangeNewItem = (event) => {\n    this.setState({ inputAddNewItem: event.target.value });\n  }\n\n  // Adds new Button\n  plusNewButton = (event) => {\n    event.preventDefault();\n    if (this.state.inputAddNewButton === \"\") {\n      return\n    }\n\n    // const container = [...this.state.container];\n    let user = this.state.user;\n    user.container.push({ id: this.state.inputAddNewButton, listItems: [] });\n\n    this.setState({\n      // container: container,\n      user: user,\n      inputAddNewButton: \"\"\n    })\n  }\n\n  // Sets new Button Id and Name\n  setActiveButtonIdAndName = (index) => {\n    // const buttonName = this.state.container[index].id;\n    let user = this.state.user;\n    const buttonName = user.container[index].id;\n\n\n    this.setState({ activeButtonId: index, activeButtonName: buttonName })\n\n  }\n\n  // Adds new Item to the created list\n  addNewItem = (event) => {\n    event.preventDefault();\n    if (this.state.inputAddNewItem === \"\") {\n      return\n    }\n\n    // const container = [...this.state.container];\n    let user = this.state.user;\n    user.container[this.state.activeButtonId]\n      .listItems\n      .push({\n        item: this.state.inputAddNewItem,\n        lineThrough: null,\n        uncheckIcon: null,\n        checkIcon: \"none\",\n        display: \"\",\n      });\n\n    this.setState({\n      // container: container,\n      user: user,\n      inputAddNewItem: \"\"\n    })\n\n  }\n\n  // Delete item functionality by clicking the Delete Icon\n  deleteItem = (index) => {\n    // const container = [...this.state.container];\n    let user = this.state.user;\n\n    user.container[this.state.activeButtonId].listItems[index].display = \"none\";\n    // this.setState({ container: container });\n    this.setState({ user: user });\n\n  }\n\n\n  // Sets the visibility of \"check\" and \"unchecked\" icons in the item li\n  setItemStyle = (index) => {\n    // const container = [...this.state.container];\n    let user = this.state.user;\n\n    if (user.container[this.state.activeButtonId].listItems[index].lineThrough === null && user.container[this.state.activeButtonId].listItems[index].checkIcon === \"none\") {\n      user.container[this.state.activeButtonId].listItems[index].lineThrough = \"line-through\";\n      user.container[this.state.activeButtonId].listItems[index].uncheckIcon = \"none\";\n      user.container[this.state.activeButtonId].listItems[index].checkIcon = null;\n    } else {\n      user.container[this.state.activeButtonId].listItems[index].lineThrough = null;\n      user.container[this.state.activeButtonId].listItems[index].checkIcon = \"none\";\n      user.container[this.state.activeButtonId].listItems[index].uncheckIcon = null;\n    }\n    // this.setState({ container: container })\n    this.setState({ user: user })\n  }\n\n  // Modal Functionality=======================\n\n  modalOnInputChange = (event) => {\n    this.setState({ modalInput: event.target.value });\n  }\n\n  saveModalNewValue = () => {\n    // const container = [...this.state.container];\n    let user = this.state.user;\n    user.container[this.state.activeButtonId].listItems[this.state.activeItemId].item = this.state.modalInput;\n\n    this.setState({ show: false });\n    // this.setState({ container: container });\n    this.setState({ user: user });\n  }\n\n  handleClose = () => {\n    this.setState({ show: false });\n    this.setState({ show: false });\n\n  }\n\n  handleShow = (event) => {\n    this.setState({\n      show: true,\n      save: true,\n      activeItemId: event.target.id\n    });\n  }\n  // ====================================\n\n\n\n\n  render() {\n\n    // Sets the moment when the \"dropdownButton\" is visible according to the size of the window\n    const dropdownButtonVisibility = () => {\n      if (this.state.windowWidth < 992) {\n        return null;\n      }\n      else {\n        return \"hidden\"\n      }\n    }\n    // Sets the moment when the \"ul\" is visible according to the size of the window\n    const ulVisibility = () => {\n      if (this.state.windowWidth < 992) {\n        return \"hidden\"\n      }\n      else {\n        return null\n      }\n    }\n\n\n\n\n\n    // Returns the ButtonName component\n    let user = this.state.user;\n    let buttonsToBeRender = null;\n    if ( user.container.length !== 0) {\n      buttonsToBeRender = (user.container.map((value, index) => {\n        return (<ButtonName\n          windowWidth={this.state.windowWidth}\n          onClick={() => this.setActiveButtonIdAndName(index)}\n          key={`${value}${index}`}\n          label={value.id}\n        />)\n      }))\n    }\n\n\n    // Returns the Item component\n    let itemToBeRender = null;\n    if (user.container.length !== 0) {\n      itemToBeRender = (user.container[this.state.activeButtonId].listItems.map((value, index) => {\n        return (<Item\n          onClick={() => this.setItemStyle(index)}\n          key={`${value}${index}`}\n          index={index}\n          label={value.item}\n          handleShow={(event) => this.handleShow(event)}\n          save={this.state.save}\n          modalInput={this.state.modalInput}\n          lineThrough={value.lineThrough}\n          checkIcon={value.checkIcon}\n          uncheckIcon={value.uncheckIcon}\n          display={value.display}\n          deleteItem={() => this.deleteItem(index)} />)\n      }))\n    }\n\n\n    return (\n      <Fragment>\n        <Modalpopup show={this.state.show}\n          onChange={(event) => this.modalOnInputChange(event)}\n          handleClose={() => this.handleClose()}\n          saveModalNewValue={() => this.saveModalNewValue()} />\n        < StartPage />\n\n        <div className=\"container-fluid border border-light\">\n          <div className=\"row\">\n            <Navigation onRouteChange={this.onRouteChange}\n             changeLogStateToFalse={this.changeLogStateToFalse}\n              isLogedIn={this.state.isLogedIn} \n              loadUser = {this.loadUser}\n              user = {this.state.user}/>\n          </div>{/*End Of Row*/}\n\n          {this.state.route === \"login\"\n            ? <Login onRouteChange={this.onRouteChange} loadUser={this.loadUser} changeLogStateToTrue={this.changeLogStateToTrue} />\n            : this.state.route === \"home\" ?\n              <div className=\"row\">\n                <div className=\"col-lg-4 listSummarySection\">\n                  <form className=\"form-inline formWraper\" onSubmit={(event) => this.plusNewButton(event)}>\n                    <input\n                      onChange={this.onInputchange}\n                      value={this.state.inputAddNewButton}\n                      type=\"text\"\n                      id=\"inputNewListItem\"\n                      className=\"form-control\"\n                      placeholder=\"Name Your List\"\n                      aria-label=\"Insert text\"\n                      aria-describedby=\"edit an existing entry field\" />\n                    <button\n                      onClick={(event) => this.plusNewButton(event)}\n                      type=\"button\"\n                      id=\"plusButton\"\n                      className=\"btn-warning\">+</button>\n                  </form>\n\n                  <div className=\"myListSummary-wraper\">\n                    <DropdownButton\n                      id=\"dropdown-basic-button\"\n                      className={` m-auto capitalize ${dropdownButtonVisibility()}`}\n                      title=\"All Your Lists\"\n                      variant=\"Warning\"\n                      size=\"lg\">\n                      {buttonsToBeRender}\n                    </DropdownButton>\n\n                    <ul className={`myListSummary ${ulVisibility()}`}>\n                      {buttonsToBeRender}\n                    </ul>\n                  </div>\n                </div>{/*End Of Col-lg-4*/}\n\n                <div className=\"col-lg-8 list-content\">\n                  <form className=\"taskForm\" onSubmit={(event) => this.addNewItem(event)}>\n                    <div className=\"component1\">\n                      <input\n                        onChange={this.onInputChangeNewItem}\n                        value={this.state.inputAddNewItem}\n                        type=\"text\"\n                        className=\"form-control shadow input-new-line\"\n                        placeholder=\"New item\"\n                        aria-label=\"Insert text\"\n                        aria-describedby=\"edit an existing entry field\" />\n                    </div>\n                    <div\n                      onClick={(event) => this.addNewItem(event)}\n                      className=\"component2\"\n                      role=\"button\">\n                      <i className=\"far fa-plus-square\" aria-hidden=\"true\"></i>\n                      <h5 className=\"addTask\">Add new item</h5>\n                    </div>\n                  </form>\n                  <ul className=\"todo-list\">\n                    <h3 className=\"todo-name\">{this.state.activeButtonName}</h3>\n\n                    {itemToBeRender}\n\n                  </ul>\n                </div>{/*End Of Col*/}\n              </div>/*End Of Row*/\n\n              : <Register onRouteChange={this.onRouteChange} loadUser={this.loadUser} changeLogStateToTrue={this.changeLogStateToTrue} />\n          }\n        </div>{/*End Of Container Fluid*/}\n      </Fragment >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}